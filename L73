using System;
using System.Collections.Generic;

public class FunctionCache<TKey, TResult>
{
    private readonly Dictionary<TKey, CacheItem> cache = new Dictionary<TKey, CacheItem>();
    private readonly Func<TKey, TResult> function;

    public FunctionCache(Func<TKey, TResult> function)
    {
        this.function = function ?? throw new ArgumentNullException(nameof(function));
    }

    public TResult GetOrAdd(TKey key, TimeSpan expiration)
    {
        if (cache.TryGetValue(key, out var cacheItem) && !cacheItem.IsExpired())
        {
            Console.WriteLine($"Cache hit for key: {key}");
            return cacheItem.Value;
        }

        Console.WriteLine($"Cache miss for key: {key}");

        TResult result = function(key);
        cache[key] = new CacheItem(result, expiration);

        return result;
    }

    private class CacheItem
    {
        public TResult Value { get; }
        public DateTime Expiration { get; }

        public CacheItem(TResult value, TimeSpan expiration)
        {
            Value = value;
            Expiration = DateTime.UtcNow.Add(expiration);
        }

        public bool IsExpired()
        {
            return DateTime.UtcNow >= Expiration;
        }
    }
}

class Program
{
    static void Main()
    {
        // Приклад використання
        FunctionCache<string, int> cache = new FunctionCache<string, int>(CalculateStringLength);

        Console.WriteLine("Result: " + cache.GetOrAdd("hello", TimeSpan.FromSeconds(2)));
        System.Threading.Thread.Sleep(1000); // Pause for 1 second
        Console.WriteLine("Result: " + cache.GetOrAdd("hello", TimeSpan.FromSeconds(2))); // Cached result
        System.Threading.Thread.Sleep(2000); // Pause for 2 seconds
        Console.WriteLine("Result: " + cache.GetOrAdd("hello", TimeSpan.FromSeconds(2))); // Recalculate due to expiration
    }

    static int CalculateStringLength(string input)
    {
        Console.WriteLine($"Calculating length of '{input}'");
        return input.Length;
    }
}
